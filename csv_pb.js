// source: csv.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_descriptor_pb = require('google-protobuf/google/protobuf/descriptor_pb.js');
goog.object.extend(proto, google_protobuf_descriptor_pb);
var product_pb = require('./product_pb.js');
goog.object.extend(proto, product_pb);
var uploaded_file_pb = require('./uploaded_file_pb.js');
goog.object.extend(proto, uploaded_file_pb);
goog.exportSymbol('proto.csv.v1.Payload', null, global);
goog.exportSymbol('proto.csv.v1.Payload.DataCase', null, global);
goog.exportSymbol('proto.csv.v1.Request', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.csv.v1.Payload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.csv.v1.Payload.oneofGroups_);
};
goog.inherits(proto.csv.v1.Payload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.csv.v1.Payload.displayName = 'proto.csv.v1.Payload';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.csv.v1.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.csv.v1.Request.repeatedFields_, null);
};
goog.inherits(proto.csv.v1.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.csv.v1.Request.displayName = 'proto.csv.v1.Request';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.csv.v1.Payload.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.csv.v1.Payload.DataCase = {
  DATA_NOT_SET: 0,
  PRODUCT: 1
};

/**
 * @return {proto.csv.v1.Payload.DataCase}
 */
proto.csv.v1.Payload.prototype.getDataCase = function() {
  return /** @type {proto.csv.v1.Payload.DataCase} */(jspb.Message.computeOneofCase(this, proto.csv.v1.Payload.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.csv.v1.Payload.prototype.toObject = function(opt_includeInstance) {
  return proto.csv.v1.Payload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.csv.v1.Payload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.csv.v1.Payload.toObject = function(includeInstance, msg) {
  var f, obj = {
    product: (f = msg.getProduct()) && product_pb.Product.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.csv.v1.Payload}
 */
proto.csv.v1.Payload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.csv.v1.Payload;
  return proto.csv.v1.Payload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.csv.v1.Payload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.csv.v1.Payload}
 */
proto.csv.v1.Payload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new product_pb.Product;
      reader.readMessage(value,product_pb.Product.deserializeBinaryFromReader);
      msg.setProduct(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.csv.v1.Payload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.csv.v1.Payload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.csv.v1.Payload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.csv.v1.Payload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProduct();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      product_pb.Product.serializeBinaryToWriter
    );
  }
};


/**
 * optional product.v1.Product product = 1;
 * @return {?proto.product.v1.Product}
 */
proto.csv.v1.Payload.prototype.getProduct = function() {
  return /** @type{?proto.product.v1.Product} */ (
    jspb.Message.getWrapperField(this, product_pb.Product, 1));
};


/**
 * @param {?proto.product.v1.Product|undefined} value
 * @return {!proto.csv.v1.Payload} returns this
*/
proto.csv.v1.Payload.prototype.setProduct = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.csv.v1.Payload.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.csv.v1.Payload} returns this
 */
proto.csv.v1.Payload.prototype.clearProduct = function() {
  return this.setProduct(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.csv.v1.Payload.prototype.hasProduct = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.csv.v1.Request.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.csv.v1.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.csv.v1.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.csv.v1.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.csv.v1.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    refId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    payloadList: jspb.Message.toObjectList(msg.getPayloadList(),
    proto.csv.v1.Payload.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.csv.v1.Request}
 */
proto.csv.v1.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.csv.v1.Request;
  return proto.csv.v1.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.csv.v1.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.csv.v1.Request}
 */
proto.csv.v1.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRefId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.csv.v1.Payload;
      reader.readMessage(value,proto.csv.v1.Payload.deserializeBinaryFromReader);
      msg.addPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.csv.v1.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.csv.v1.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.csv.v1.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.csv.v1.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRefId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPayloadList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.csv.v1.Payload.serializeBinaryToWriter
    );
  }
};


/**
 * optional string ref_id = 1;
 * @return {string}
 */
proto.csv.v1.Request.prototype.getRefId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.csv.v1.Request} returns this
 */
proto.csv.v1.Request.prototype.setRefId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.csv.v1.Request.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.csv.v1.Request} returns this
 */
proto.csv.v1.Request.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Payload payload = 3;
 * @return {!Array<!proto.csv.v1.Payload>}
 */
proto.csv.v1.Request.prototype.getPayloadList = function() {
  return /** @type{!Array<!proto.csv.v1.Payload>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.csv.v1.Payload, 3));
};


/**
 * @param {!Array<!proto.csv.v1.Payload>} value
 * @return {!proto.csv.v1.Request} returns this
*/
proto.csv.v1.Request.prototype.setPayloadList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.csv.v1.Payload=} opt_value
 * @param {number=} opt_index
 * @return {!proto.csv.v1.Payload}
 */
proto.csv.v1.Request.prototype.addPayload = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.csv.v1.Payload, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.csv.v1.Request} returns this
 */
proto.csv.v1.Request.prototype.clearPayloadList = function() {
  return this.setPayloadList([]);
};


goog.object.extend(exports, proto.csv.v1);
